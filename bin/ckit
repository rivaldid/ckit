#!/bin/bash
#
#
#  CKIT - Construction Kit - 0.62.1
#    An unofficial archlinux repository manager
#    over the file transfer protocol.
#
#  Copyright (C) 2010   Dario 'Dax' Vilardi
#                       dax [at] deelab [dot] org
#
#
#  Authors:
#       Dario 'Dax' Vilardi     : bash developer
#       Corrado 'bardo' Primier : bash developer
#       Luca 'Nss'              : ruby developer
#       Giovanni Scafora        : packager
#
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


#################### ENVIRONMENT  ##########################

libdir=$(ruby -rrbconfig -e 'puts Config::CONFIG["sitelibdir"]')
conf="/etc/ckit/ckit.conf"

#################### /ENVIRONMENT  #########################




#################### PRIVATE INTERFACES ####################

die(){
    echo "$@"
    exit 1
}

cd(){
    command cd "$@" || die "Yikes!"
}

get_aur_tarball(){
    pkg="$1"
    cd "$builddir"
    url="http://aur.archlinux.org/packages/$pkg/$pkg/PKGBUILD"
    if PKGBUILD=$(wget -q -O - "$url"); then
        echo -n "  -> Getting $pkg from AUR... "
        wget "http://aur.archlinux.org/packages/$pkg/$pkg.tar.gz" -o /dev/null
        if [[ $? == 0 ]]; then
            echo "done"
            tar -xf "$pkg.tar.gz"
            rm "$pkg.tar.gz"
        else
            echo "failed"
        fi
    else
        echo "  -> $pkg not found on AUR."
    fi
}

ftp_run(){
    # available commands: ls,put,get,delete,rmdir
    command="$1"
    file="$2"
    ruby -I "$libdir" "$libdir"/ruFTP.rb \
        -H "$hostname" \
        -u "$user" \
        -p "$pass" \
        -d "$remoteroot/$arch" \
        -c "$command" "$file"
}

ftp_get_repo(){
    cd "$repodir"
    [[ -f "$repo" ]] && rm "$repo"

    echo "==> Getting db "
    ftp_checkfile "$repo" && ftp_run get "$repo"
}

ftp_put(){
    file="$1"
    ftp_run put "$file"
}

ftp_delete(){
    file="$1"
    ftp_run delete "$file"
}

ftp_put_repo(){
    cp "$repo" "$repo"_prev

    echo "==> Putting db "
    ftp_put "$repo"

    ftp_get_repo
    i=$(stat -c%s "$repo")
    j=$(stat -c%s "$repo"_prev)

    (( $i == $j )) \
        && echo "  -> Size test ok ($i)"  \
        || echo "  -> Take care: $i ~ $j! restoredb maybe needed"
}

ftp_pkg_delete(){
    pkg="$1"
    target=$(ftp_run ls '' | awk -v "pkg=$pkg" '$0 ~ pkg {print $9}')
    if [[ -z "$target" ]]; then echo "  -> $pkg not found"
        else ftp_run delete "$target"
    fi
}

ftp_checkfile(){
    file="$1"
    ftp_run ls '' | grep "$file" &>/dev/null \
        && return 0 \
        || return 1
}

lock(){
    ftp_checkfile lock.lk \
        && die "==> Repository in maintenance yet. Please wait!"
    touch "$repodir/lock.lk"
    echo "$USER" - $(date) > lock.lk
    echo "==> Locking ftp to prevent jumble between maintenances"
    ftp_put "$repodir/lock.lk"
}

unlock(){
    echo "==> Unlocking ftp"
    ftp_delete lock.lk
    ftp_checkfile lock.lk \
        && echo "  -> Failed at unlock, remove lock.lk manually!"
    rm "$repodir/lock.lk"
}

post_build(){
    pkg="$1"
    # PKGDEST
    [[ $PKGDEST ]] || PKGDEST="$builddir/$pkg"
    cd $PKGDEST
    file=($pkg*$PKGEXT)

    if [[ -s "${file[0]}" ]]; then

        echo "==> Yo, $pkg done :)"
        mv "$PKGDEST/$file" "$repodir"

        # delete sources for stable packages
        is_devel "$pkg" || deletesrc_run "$pkg"

    else
        echo "==> WTF, $pkg fails at building :("
    fi
}

copy_log_to_pkgs(){
    IFS=$'\n'
    [[ -s "$repodir/$1" ]] \
        && pkgs=($(< "$repodir/$1")) \
        || die "==> $1 empty"
}

#is_devel() { [[ $1 = *-@(svn|cvs|hg|git|bzr|darcs|dev|devel) ]]; }
is_devel() {
    case ${1##*-} in svn|cvs|hg|git|bzr|darcs|dev|devel) return 0;; esac
    return 1
}

deletesrc_run(){
    pkg="$1"

    cd "$builddir/$pkg"
    targets=( "zip" "ZIP" "rar" "RAR" "bz2" "gz" "part" "jar" "Jar" "deb" "html" "bin" "run" "rpm" "tgz" "pk3" )
    echo "==> Cleaning $pkg directory"

    found=1

    for target in "${targets[@]}"; do
        rm *"$target" &>/dev/null && echo "  -> $target deleted" && found=0
    done

    [[ "$found" == "1" ]] && echo "  -> No targets detected"

    cd ~-
}


#################### /PRIVATE INTERFACES ###################




#################### PUBLIC INTERFACES #####################




# DELETESRC
deletesrc(){

    if [[ "$FROMLOG" == 0 ]] && (( "${#pkgs[@]}" == 0 )); then
        copy_log_to_pkgs "$deletelog"
    else
        (( "${#pkgs[@]}" == 0 )) && die "==> Packages needed!"
    fi

    for pkg in "${pkgs[@]}"; do
        deletesrc_run "$pkg"
    done
}
# /DELETESRC



# EDITPKG
editpkg(){
    read -p "==> Package to edit: " pkg
    if [[ -d "$builddir/$pkg" ]]; then
        echo "==> $pkg:"
        cd "$builddir/$pkg"
        for file in *; do
            [[ -f "$file" ]] && echo "  -> $file"
        done
        read -p "==> Which one to edit? " file
        if [[ -f "$builddir/$pkg/$file" ]]; then
            echo "==> Editing $pkg/$file"
            "$editor" "$builddir/$pkg/$file" && echo "  -> Done."
        else
            echo "==> $file not found."
        fi
    else
        echo "==> $pkg not found."
    fi
}
# /EDITPKG


# EDITLOG
editlog(){
    echo "==> Available logs:"
    cd "$repodir"
    for file in *log; do
        echo "  -> $file"
    done
    read -p "==> Which one to edit? " log
    if [[ -f "$repodir/$log" ]]; then
        echo "==> Editing $repodir/$log"
        "$editor" "$repodir/$log" && echo "  -> Done."
    else
        echo "==> $log not found."
    fi
}
# /EDITLOG



# OWNPKG
ownpkg(){
    read -p "==> Package to own: " pkg
    if [[ -d "$builddir/$pkg" ]]; then
        echo "  -> Owning $pkg "
        sudo chown -R "$USER" "$builddir/$pkg" && echo "  -> Done."
    else
        echo "  -> $pkg not found."
    fi
}
# /OWNPKG



# CLEARCACHE
clearcache(){
    rm "$cachedir/*"
}
# /CLEARCACHE



# RESTOREDB
restoredb(){

    cd "$repodir"
    echo "==> Restoring db from latest backup."
    mv "$repo"_prev "$repo"
    ftp_put_repo

}
# /RESTOREDB



# CHECK
check(){

    [[ -f "$repodir/$checklog" ]] && rm "$repodir/$checklog"
    touch "$repodir/$checklog"

    ftp_get_repo
    echo "==> Checking for outdated packages"


    while read -r line; do

        [[ "$line" = */ ]] || continue
        i="${line%/}"

        pkg="${i%-*-*}"
        repover="${i#$pkg-}"

        # AUR version
        url="http://aur.archlinux.org/packages/$pkg/$pkg/PKGBUILD"
        if PKGBUILD=$(wget -q -O - "$url"); then
            aurver="$(eval "$PKGBUILD" &>/dev/null; echo "$pkgver-$pkgrel")"
        else
            aurver="Null"
        fi

        # local version
        if pacman -Q "$pkg" &> /dev/null; then
            localver="$(LANG=C pacman -Qi "$pkg" | awk '/^Version/ {print $3}')"
        else
            localver="Null"
        fi

        # devel version
        if [[ "$develcheck" == "0" ]] && is_devel "$pkg" && [[ -d "$builddir/$pkg" ]]; then
            cd "$builddir/$pkg"
            # awk -v foo=something  assigns an awk variable
            # $0 being the whole line, $1 being the first field
            develver=$(makepkg -o 2>&1 | awk -v "pkg=$pkg" '$0 ~ pkg {print $6}')
            cd ~-
            version="$develver"
        else
            version="$aurver"
        fi

        # comparing
        result=$(vercmp "$repover" "$version")

        if (( "$result" < 0 )); then

            [[ "$develcheck" == "0" ]] && is_devel "$pkg"

            if [[ "$?" == "0" ]] || ! is_devel "$pkg"; then

                echo "  -> $pkg REPO:$repover LOCAL:$localver CURRENTLY:$version"
                echo "$pkg" >> /tmp/CKIT
                cat /tmp/CKIT "$repodir/$checklog" > "/tmp/$checklog"
                rm /tmp/CKIT
                mv "/tmp/$checklog" "$repodir/$checklog"

            fi

        fi

    done < <(tar ztf "$repo")

}
# /CHECK



# UPDATEPKGBUILD
updatepkgbuild(){

    echo "==> Updating local PKGBUILD from AUR"

    (( "${#pkgs[@]}" == 0 )) \
        && [[ "$FROMLOG" == "0" ]] \
        && copy_log_to_pkgs "$updatelog"

    if (( "${#pkgs[@]}" == 0 )); then

        ftp_get_repo

        IFS=$'\n' read -d '' -a lines < <(tar ztf "$repo")

        for line in "${lines[@]}"; do
            [[ "$line" = */ ]] || continue
            i="${line%/}"
            pkg="${i%-*-*}"
            read -p "  -> $pkg: update? (y/n) " answer
            [[ "$answer" == "y" ]] && get_aur_tarball "$pkg"
        done

    else

        for pkg in "${pkgs[@]}"; do
            get_aur_tarball "$pkg"
        done

    fi

}
# /UPDATEPKGBUILD



# AURDEVELSYNC
aurdevelsync(){

    echo "==> Synchronize devel PKGBUILDs from AUR"

    ftp_get_repo

    while read -r -u3 line; do

        [[ "$line" = */ ]] || continue
        i="${line%/}"
        pkg="${i%-*-*}"

        if is_devel "$pkg"; then
            read -p "  -> $pkg: update? (y/n) " answer
            [[ "$answer" == "y" ]] && get_aur_tarball "$pkg"
        fi

    done 3< <(tar ztf "$repo")

 # You've got  while read -r line; do ... read -p ...; done < <(...)
 # Both reads are reading the output of tar ztf
 # So use a separate fd.  while read -r -u3 line; do ...; done 3< <(tar ztf "$repo")

}
# /AURDEVELSYNC



# BUILD
build(){

    # filter & replace $pkgs from checklog if asked
    if (( "${#pkgs[@]}" == 0 )); then
        if [[ "$FROMLOG" == "0" ]]; then
            copy_log_to_pkgs "$checklog"
        else
            die "==> Nothing to build."
        fi
    fi


    [[ -f "$repodir/$checklog" ]] && rm "$repodir/$checklog"

    cd "$builddir"


    for pkg in "${pkgs[@]}"; do

        echo "==> $pkg"

        #dependences "$pkg"

        makepkg=()


        if [[ "$noconfirm" == "1" ]]; then

            if [[ "$aur" == "1" ]]; then
                read -p "  -> Do you want get tarball from AUR? (y/n) " answer
                [[ "$answer" == "y" ]] && aur=0
            fi

            if [[ "$root" == "1" ]]; then
                read -p "  -> Do you want build as root? (y/n) " answer
                [[ "$answer" == "y" ]] && root=0
            fi

            if [[ "$install" == "1" ]]; then
                read -p "  -> Do you want install package after build? (y/n) " answer
                [[ "$answer" == "y" ]] && install=0
            fi

            if [[ "$skipinteg" == "1" ]]; then
                read -p "  -> Do you want skip integrity check? (y/n) " answer
                [[ "$answer" == "y" ]] && skipinteg=0
            fi

        fi


        [[ "$aur" == "0" ]] && get_aur_tarball "$pkg"

        [[ "$root" == "0" ]] && makepkg+=(sudo)

        makepkg+=(makepkg)

        [[ "$install" == "0" ]] && makepkg+=(-i)

        makepkg+=(-fs)

        [[ "$root" == "0" ]] && makepkg+=(--asroot)

        [[ "$skipinteg" == "0" ]] && makepkg+=(--skipinteg)

        is_devel "$pkg" || makepkg+=(-c)


        cd "$pkg"

        # execute makepkg
        [[ -s "PKGBUILD" ]] && "${makepkg[@]}"

        post_build "$pkg"

        cd ~-


    done


}
# /BUILD



# ADD
add(){

    cd "$repodir"

    # getting working list
    pkgs=()
    for file in *"$PKGEXT"; do
        pkg="${file%-*-*-*}"
        [[ $pkg == *"$PKGEXT" ]] || pkgs+=($pkg)
    done

    # filtering
    (( "${#pkgs[@]}" == 0 )) && die "==> Nothing to add, build packages first!"

    # locking ftp
    lock

    # getting db
    ftp_get_repo

    # adding pkgs to db
    echo "==> Adding queued packages"
    for file in *"$PKGEXT"; do
        echo "  -> ${file%-*-*-*}"
        repo-add --quiet "$repo" "$file"
    done

    # uploading db
    ftp_put_repo

    # deleting previous version
    echo "==> Deleting previous version"
    for pkg in "${pkgs[@]}"; do
        ftp_pkg_delete "$pkg"
    done

    # uploading packages
    echo "==> Uploading packages"
    for file in *"$PKGEXT"; do
        ftp_put "$file" && mv "$file" "$cachedir"
    done

    # unlocking ftp
    unlock

    echo "==> Repository updated! Gj, see ya."

}
# /ADD



# REMOVE
remove(){

    # init
    (( "${#pkgs[@]}" == 0 )) && die "==> Packages needed!"

    cd "$repodir"

    # locking ftp
    lock

    # getting db
    ftp_get_repo

    # deleting packages
    echo "==> Deleting packages"
    for pkg in "${pkgs[@]}"; do
        ftp_pkg_delete "$pkg"
    done

    # removing pkgs from db
    echo "==> Removing from db"
    for pkg in "${pkgs[@]}"; do
        echo "  -> $pkg"
        repo-remove --quiet "$repo" "$pkg"
    done

    # uploading db
    ftp_put_repo

    # unlocking ftp
    unlock
}
# /REMOVE



# DIFFREPO
diffrepo(){

    echo "==> Diff between lists of both repo"
    cd "$repodir"

    # the 1st one
    ftp_get_repo
    mv "$repo" "repo1"
    [[ "$arch" == "i686" ]] \
        && arch="x86_64" \
        || arch="i686"
    echo "==> Swtching arch to $arch"

    # the 2nd one
    ftp_get_repo
    mv "$repo" "repo2"
    [[ "$arch" == "i686" ]] \
        && arch="x86_64" \
        || arch="i686"
    echo "==> Restoring arch to $arch"

    [[ -f list1 ]] && rm -f list1
    [[ -f list2 ]] && rm -f list2
    touch list1 list2

    while read -r line; do
        [[ "$line" = */ ]] || continue
        i="${line%/}"
        pkg="${i%-*-*}"
        ver="${i#$pkg-}"
        echo "$pkg" - "$ver" > foo
        cat foo list1 > bar
        rm foo
        mv bar list1
    done < <(tar ztf repo1)

    while read -r line; do
        [[ "$line" = */ ]] || continue
        i="${line%/}"
        pkg="${i%-*-*}"
        ver="${i#$pkg-}"
        echo "$pkg" - "$ver" > foo
        cat foo list2 > bar
        rm foo
        mv bar list2
    done < <(tar ztf repo2)

    rm -f repo1 repo2

    "$diff" list1 list2

}
# /DIFFREPO


# HELP
help(){
    echo "==> CKIT - Construction KIT!"
    echo "==> Preprocessing:"
    echo "  -> -D[L] packages: delete sources from package's directory"
    echo "  -> -DL: delete sources from package's directory by deletelog"
    echo "  -> -U[L]: Update tarball from AUR"
    echo "  -> -UL: Update tarball from AUR by updatelog"
    echo "  -> -O: Own package"
    echo "  -> -E: Edit a file from package"
    echo "  -> -h: This help"
    echo "==> Processing:"
    echo "  -> -B[a][r][i][s][n][L] packages: build packages."
    echo "  -> -Ba: get tarball from AUR"
    echo "  -> -Br: build as root"
    echo "  -> -Bi: install packages after builds"
    echo "  -> -Bs: skip integrity check"
    echo "  -> -Bn: don't ask confirm"
    echo "  -> -BL: build from checklog"
    echo "  -> -L: edit log files"
    echo "  -> -C[d]: check for outdated stable packages"
    echo "  -> -Cd: check for outdated stable and devel packages"
    echo "  -> -R packages: remove packages from repository"
    echo "==> Postprocessing:"
    echo "  -> -A: add built packages"
    echo "  -> -H: clear cache"
    echo "  -> -T: restore remote db from a failed upload"
    echo "  -> -X: take a view of both the repository"
}
# /HELP



#################### /PUBLIC INTERFACES ####################





#################### MAIN ##################################


# check own config
[[ ! -s "$conf" ]] \
        && die "==> ckit.conf not found!" \
        || source "$conf"

# check makepkg config
[[ ! -s "/etc/makepkg.conf" ]] \
        && die "==> makepkg.conf not found!" \
        || source "/etc/makepkg.conf"


# check workspaces
mkdir -p "$builddir" "$repodir" "$cachedir"


# check logs
logs=( "$checklog" "$updatelog" "$deletelog" )
for log in "${logs[@]}"; do
    [[ ! -f "$repodir/$log" ]] && touch "$repodir/$log"
done


# check arguments
test -z "$1" && die "==> RTFM, see ya!"


# primary
ADD=1
BUILD=1
CHECK=1
REMOVE=1
BUILDFROMCHECK=1
UPDATEPKGBUILD=1
CLEARCACHE=1
RESTOREDB=1
OWNPKG=1
EDITPKG=1
DELETESRC=1
HELP=1
FROMLOG=1
DIFFREPO=1
AURDEVELSYNC=1
# secondary
aur=1
root=1
install=1
skipinteg=1
noconfirm=1
develcheck=1


x=1         # Avoids an error if we get no options at all.
while getopts "ABarisnCdRUHLTOEDXSh" opt; do
    case "$opt" in
        A) ADD=0;;
        B) BUILD=0;;
        a) aur=0;;
        r) root=0;;
        i) install=0;;
        s) skipinteg=0;;
        n) noconfirm=0;;
        C) CHECK=0;;
        d) develcheck=0;;
        R) REMOVE=0;;
        U) UPDATEPKGBUILD=0;;
        H) CLEARCACHE=0;;
        L) FROMLOG=0;;
        T) RESTOREDB=0;;
        O) OWNPKG=0;;
        E) EDITPKG=0;;
        D) DELETESRC=0;;
        X) DIFFREPO=0;;
        S) AURDEVELSYNC=0;;
        h) HELP=0;;
    esac
    x="$OPTIND"
done
shift $(($x-1))
pkgs=("$@")



# rule
if [[ "$REMOVE" == "0" ]]; then
    [[ "$BUILD" == "0" ]] && die "==> Not allowed."
    [[ "$RESTOREDB" == "0" ]] && die "==> Not allowed."
    [[ "$ADD" == "0" ]] && die "==> Not allowed."
fi
[[ "$DELETESRC" == "0" ]] && [[ "$UPDATEPKGBUILD" == "0" ]] && die "==> Not allowed."


# preproccessing
[[ "$FROMLOG" == "0" ]] && [[ "$UPDATEPKGBUILD" == "1" ]] && [[ "$BUILD" == "1" ]] && [[ "$DELETESRC" == "1" ]] && editlog
[[ "$UPDATEPKGBUILD" == "0" ]] && updatepkgbuild
[[ "$AURDEVELSYNC" == "0" ]] && aurdevelsync
[[ "$OWNPKG" == "0" ]] && ownpkg
[[ "$EDITPKG" == "0" ]] && editpkg
[[ "$DELETESRC" == "0" ]] && deletesrc
[[ "$HELP" == "0" ]] && help


# processing
[[ "$BUILD"  == "0" ]] && build
[[ "$CHECK" == "0" ]] && check
[[ "$REMOVE" == "0" ]] && remove


# postprocessing
[[ "$ADD"  == "0" ]] && add
[[ "$CLEARCACHE" == "0" ]] && clearcache
[[ "$RESTOREDB" == "0" ]] && restoredb
[[ "$DIFFREPO" == "0" ]] && diffrepo



#################### /MAIN #################################
